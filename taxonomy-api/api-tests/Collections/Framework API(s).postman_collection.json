{
	"info": {
		"_postman_id": "cf546380-1eff-4ed7-92ee-ee2d382986f7",
		"name": "Framework API(s)",
		"description": "The Framework API resources is basically a supporting data structure which serves as a template \n- It can be used in places where the structure remains the same but only the usage changes as per the requirement.\n- These resources are used to create, update, read, search, the objects like channels, frameworks, catergories, terms\n- The Hierarchy is as: Framework-->Category-->Terms\n     - Category: An abstract classification of the terms partitioned according to requirement\n     - Terms: Refers to a keyword or a phrase to descibe a Concept\n- [TestCases](https://www.getpostman.com/collections/10a84f4c27c0b45f690b)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19432603",
		"_collection_link": "https://blue-flare-639335.postman.co/workspace/API-automation-Knowlg~3ae6d444-e850-468d-bdb0-8be163d62aea/collection/19432603-cf546380-1eff-4ed7-92ee-ee2d382986f7?action=share&source=collection_link&creator=19432603"
	},
	"item": [
		{
			"name": "channel/v1",
			"item": [
				{
					"name": "Channel",
					"item": [
						{
							"name": "Create Channel",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "Create Channel",
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "value",
															"value": "{{apiKey}}",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"request\": {\n    \"channel\": {\n      \"name\": \"Channel Name\",\n      \"code\": \"channel-id\"\n    }\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://4.224.0.244//channel/v1/create",
													"protocol": "http",
													"host": [
														"4",
														"224",
														"0",
														"244"
													],
													"path": [
														"",
														"channel",
														"v1",
														"create"
													]
												},
												"description": "This API is used for creating a channel    \n  - The endpoint for **Create Channel** is `/channel/v1/create`\n  - It points to knowledge-mw-service - `/v1/channel/create`\n  - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
											},
											"response": [
												{
													"name": "OK ! Successful operation.\"Create channel\" operation was successfully executed.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require bearer authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"channel\": {\n      \"name\": \"Channel Name\",\n      \"code\": \"channel-id\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/channel/v1/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"channel",
																"v1",
																"create"
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.channel.create\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-14T08:27:27.810Z\",\n  \"params\": {\n    \"resmsgid\": \"3357da20-3de6-11eb-9ff3-67c41480f6aa\",\n    \"msgid\": \"3353bb70-3de6-11eb-9ff3-67c41480f6aa\",\n    \"status\": \"successful\",\n    \"err\": null,\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"identifier\": \"channel-id\",\n    \"node_id\": \"channel-id\"\n  }\n}"
												},
												{
													"name": "BAD REQUEST. The \"Create Channel\" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter or providing some wrong request.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require bearer authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"channel\": {\n      \"name\": \"Channel Name\",\n      \"code\": \"channel-id\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/channel/v1/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"channel",
																"v1",
																"create"
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.channel.create\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-14T08:26:15.914Z\",\n  \"params\": {\n    \"resmsgid\": \"087d64a0-3de6-11eb-9ff3-67c41480f6aa\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": \"CONSTRAINT_VALIDATION_FAILED\",\n    \"errmsg\": \"Object already exists with identifier: channel-id\"\n  },\n  \"responseCode\": \"CLIENT_ERROR\",\n  \"result\": {\n    \"messages\": null\n  }\n}"
												},
												{
													"name": "INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require bearer authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"channel\": {\n      \"name\": \"Channel Name\",\n      \"code\": \"channel-id\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/channel/v1/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"channel",
																"v1",
																"create"
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "Negative",
									"item": []
								}
							]
						},
						{
							"name": "Read Channel",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "Get a Channel",
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "value",
															"value": "{{apiKey}}",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/channel/v1/read/:ID",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"channel",
														"v1",
														"read",
														":ID"
													],
													"variable": [
														{
															"key": "ID",
															"value": "Ut enim offici",
															"description": "(Required) Unique identifier of the channel to get"
														}
													]
												},
												"description": "This API is associated with fetching a channel by a specific channel ID\n   - The endpoint for **Get a Channel** is `/channel/v1/read/{ID}`\n   - It points to knowledge-mw-service - `/v1/channel/read/{ID}` \n   - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
											},
											"response": [
												{
													"name": "OK ! Successful operation. **Channel Read** operation was successfully executed. \\n Please refer for different additional [metadata](https://github.com/project-sunbird/knowledge-platform/blob/release-3.5.0/schemas/content/1.0/schema.json)",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   \n   - application/json\n   - multipart/form-data\n   - application/x-www-form-urlencoded",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/channel/v1/read/:ID",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"channel",
																"v1",
																"read",
																":ID"
															],
															"variable": [
																{
																	"key": "ID",
																	"value": "Ut enim offici",
																	"description": "(Required) Unique identifier of the channel to get"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.channel.read\",\n  \"ver\": \"3.0\",\n  \"ts\": \"2020-12-14T08:33:50ZZ\",\n  \"params\": {\n    \"resmsgid\": \"02c742d2-57e1-4441-aa31-0ce339c3917b\",\n    \"msgid\": null,\n    \"err\": null,\n    \"status\": \"successful\",\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"channel\": {\n      \"identifier\": \"channel-405\",\n      \"lastStatusChangedOn\": \"2020-12-14T08:27:49.490+0000\",\n      \"code\": \"channel-405\",\n      \"consumerId\": \"7411b6bd-89f3-40ec-98d1-229dc64ce77d\",\n      \"assetAdditionalCategories\": [],\n      \"autoCreateBatch\": \"Enabled\",\n      \"languageCode\": [],\n      \"suggested_frameworks\": [\n        {\n          \"identifier\": \"NCF\",\n          \"code\": \"NCF\",\n          \"name\": \"NCF\",\n          \"objectType\": \"Framework\"\n        }\n      ],\n      \"createdOn\": \"2020-12-14T08:27:49.490+0000\",\n      \"objectType\": \"Channel\",\n      \"versionKey\": \"1607934825088\",\n      \"collectionPrimaryCategories\": [\n        \"Content Playlist\",\n        \"Course\",\n        \"Digital Textbook\",\n        \"Explanation Content\"\n      ],\n      \"contentPrimaryCategories\": [\n        \"Course Assessment\",\n        \"eTextbook\",\n        \"Explanation Content\",\n        \"Learning Resource\",\n        \"Practice Question Set\",\n        \"Teacher Resource\"\n      ],\n      \"name\": \"Channel without Default License\",\n      \"lastUpdatedOn\": \"2020-12-14T08:33:45.088+0000\",\n      \"defaultCourseFramework\": \"TPD\",\n      \"collectionAdditionalCategories\": [\n        \"Textbook\",\n        \"Lesson Plan\",\n        \"TV Lesson\"\n      ],\n      \"assetPrimaryCategories\": [\n        \"Asset\",\n        \"CertAsset\",\n        \"Certificate Template\"\n      ],\n      \"contentAdditionalCategories\": [\n        \"Classroom Teaching Video\",\n        \"Concept Map\",\n        \"Curiosity Question Set\",\n        \"Experiential Resource\",\n        \"Explanation Video\",\n        \"Focus Spot\",\n        \"Learning Outcome Definition\",\n        \"Lesson Plan\",\n        \"Marking Scheme Rubric\",\n        \"Pedagogy Flow\",\n        \"Previous Board Exam Papers\",\n        \"TV Lesson\",\n        \"Textbook\"\n      ],\n      \"status\": \"Live\",\n      \"defaultFramework\": \"NCF\"\n    }\n  }\n}"
												},
												{
													"name": "RESOURCE NOT FOUND. The **Channel Read** operation failed ! The possible reason for failure is that you may have passed invalid channel id.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   \n   - application/json\n   - multipart/form-data\n   - application/x-www-form-urlencoded",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/channel/v1/read/:ID",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"channel",
																"v1",
																"read",
																":ID"
															],
															"variable": [
																{
																	"key": "ID",
																	"value": "Ut enim offici",
																	"description": "(Required) Unique identifier of the channel to get"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.channel.read\",\n  \"ver\": \"3.0\",\n  \"ts\": \"2020-12-14T08:36:08ZZ\",\n  \"params\": {\n    \"resmsgid\": \"e54ff3af-4026-420e-9412-0fcd3eba1674\",\n    \"msgid\": null,\n    \"err\": \"NOT_FOUND\",\n    \"status\": \"failed\",\n    \"errmsg\": \"Error! Node(s) doesn't Exists. | [Invalid Node Id.]: channel-407\"\n  },\n  \"responseCode\": \"RESOURCE_NOT_FOUND\",\n  \"result\": {\n    \"messages\": null\n  }\n}"
												},
												{
													"name": "INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   \n   - application/json\n   - multipart/form-data\n   - application/x-www-form-urlencoded",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/channel/v1/read/:ID",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"channel",
																"v1",
																"read",
																":ID"
															],
															"variable": [
																{
																	"key": "ID",
																	"value": "Ut enim offici",
																	"description": "(Required) Unique identifier of the channel to get"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "Negative",
									"item": []
								}
							]
						},
						{
							"name": "Update Channel",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "Update Channel",
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "value",
															"value": "{{apiKey}}",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"request\": {\n    \"channel\": {\n      \"description\": \"Updated channel description\"\n    }\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/channel/v1/update/:ID",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"channel",
														"v1",
														"update",
														":ID"
													],
													"variable": [
														{
															"key": "ID",
															"value": "Ut enim offici",
															"description": "(Required) Unique identifier of the channel to be updated"
														}
													]
												},
												"description": "This API is associated with updating a specific channel\n  - The endpoint for **Update Channel** is `/channel/v1/update/{ID}`\n  - It points to knowledge-mw-service - `/v1/channel/update/{ID}`\n  - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
											},
											"response": [
												{
													"name": "OK ! Successful operation.\"Update channel by ID\" operation was successfully executed.",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.\n Possible media types can be:- \n   - application/json\n   - multipart/form-data\n   - application/x-www-form-urlencoded",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"channel\": {\n      \"description\": \"Updated channel description\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/channel/v1/update/:ID",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"channel",
																"v1",
																"update",
																":ID"
															],
															"variable": [
																{
																	"key": "ID",
																	"value": "Ut enim offici",
																	"description": "(Required) Unique identifier of the channel to be updated"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.channel.update\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-14T08:29:24.724Z\",\n  \"params\": {\n    \"resmsgid\": \"79078340-3de6-11eb-9ff3-67c41480f6aa\",\n    \"msgid\": \"78fef7c0-3de6-11eb-9ff3-67c41480f6aa\",\n    \"status\": \"successful\",\n    \"err\": null,\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"identifier\": \"channel-405\",\n    \"node_id\": \"channel-405\"\n  }\n}"
												},
												{
													"name": "BAD REQUEST. The **Update Channel\" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.\n Possible media types can be:- \n   - application/json\n   - multipart/form-data\n   - application/x-www-form-urlencoded",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"channel\": {\n      \"description\": \"Updated channel description\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/channel/v1/update/:ID",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"channel",
																"v1",
																"update",
																":ID"
															],
															"variable": [
																{
																	"key": "ID",
																	"value": "Ut enim offici",
																	"description": "(Required) Unique identifier of the channel to be updated"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"ts\": 79777367,\n  \"id\": \"Lorem in dolore ex ullamco\",\n  \"params\": {\n    \"msgid\": \"in mollit commodo\",\n    \"resmsgid\": \"fugiat deserunt Lorem\",\n    \"status\": \"failed\",\n    \"err\": \"ut dolor et repreh\",\n    \"errmsg\": \"ut enim \"\n  },\n  \"ver\": \"reprehenderit laboris\",\n  \"responseCode\": \"proident qui minim\",\n  \"result\": {}\n}"
												},
												{
													"name": "RESOURCE NOT FOUND. The \"update channel by ID\" operation failed ! The possible reason for failure is that you may have passed invalid channel id.",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.\n Possible media types can be:- \n   - application/json\n   - multipart/form-data\n   - application/x-www-form-urlencoded",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"channel\": {\n      \"description\": \"Updated channel description\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/channel/v1/update/:ID",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"channel",
																"v1",
																"update",
																":ID"
															],
															"variable": [
																{
																	"key": "ID",
																	"value": "Ut enim offici",
																	"description": "(Required) Unique identifier of the channel to be updated"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.channel.update\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-14T08:30:44.219Z\",\n  \"params\": {\n    \"resmsgid\": \"a8697cb0-3de6-11eb-9ff3-67c41480f6aa\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": \"NOT_FOUND\",\n    \"errmsg\": \"Error! Node(s) doesn't Exists. | [Invalid Node Id.]: channel-406\"\n  },\n  \"responseCode\": \"RESOURCE_NOT_FOUND\",\n  \"result\": {\n    \"messages\": null\n  }\n}"
												},
												{
													"name": "INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.\n Possible media types can be:- \n   - application/json\n   - multipart/form-data\n   - application/x-www-form-urlencoded",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"channel\": {\n      \"description\": \"Updated channel description\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/channel/v1/update/:ID",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"channel",
																"v1",
																"update",
																":ID"
															],
															"variable": [
																{
																	"key": "ID",
																	"value": "Ut enim offici",
																	"description": "(Required) Unique identifier of the channel to be updated"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "Negative",
									"item": []
								}
							]
						},
						{
							"name": "List Channel",
							"item": [
								{
									"name": "Positive",
									"item": []
								},
								{
									"name": "Negative",
									"item": []
								}
							]
						}
					]
				},
				{
					"name": "Channel Category",
					"item": [
						{
							"name": "Create Channel Category",
							"item": [
								{
									"name": "Positive",
									"item": []
								},
								{
									"name": "Negative",
									"item": []
								}
							]
						},
						{
							"name": "Read Channel category",
							"item": [
								{
									"name": "Positive",
									"item": []
								},
								{
									"name": "Negative",
									"item": []
								}
							]
						},
						{
							"name": "Search Channel category",
							"item": [
								{
									"name": "Positive",
									"item": []
								},
								{
									"name": "Negative",
									"item": []
								}
							]
						},
						{
							"name": "Update Channel category",
							"item": [
								{
									"name": "Positive",
									"item": []
								},
								{
									"name": "Negative",
									"item": []
								}
							]
						},
						{
							"name": "Delete Channel Category",
							"item": [
								{
									"name": "Positive",
									"item": []
								},
								{
									"name": "Negative",
									"item": []
								}
							]
						}
					]
				},
				{
					"name": "Channel Term",
					"item": [
						{
							"name": "Create Channel term",
							"item": [
								{
									"name": "Positive",
									"item": []
								},
								{
									"name": "Negative",
									"item": []
								}
							]
						},
						{
							"name": "Read Channel term",
							"item": [
								{
									"name": "Positive",
									"item": []
								},
								{
									"name": "Negative",
									"item": []
								}
							]
						},
						{
							"name": "Search Channel term",
							"item": [
								{
									"name": "Positive",
									"item": []
								},
								{
									"name": "Negative",
									"item": []
								}
							]
						},
						{
							"name": "Update Channel term",
							"item": [
								{
									"name": "Positive",
									"item": []
								},
								{
									"name": "Negative",
									"item": []
								}
							]
						},
						{
							"name": "Delete Channel term",
							"item": [
								{
									"name": "Positive",
									"item": []
								},
								{
									"name": "Negative",
									"item": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "framework/v1",
			"item": [
				{
					"name": "framework",
					"item": [
						{
							"name": "Create a Framework",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "Create a framework with valid mandatory fields",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"name\", \"Framework111\");\r",
															"pm.environment.set(\"code\", \"Framework111\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','status', 'err','errmsg');\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"null\");\r",
															"});\r",
															"\r",
															"pm.test(\"Status has string \", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"successful\");\r",
															"});\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.result).to.have.all.keys('node_id', 'versionKey');\r",
															"  pm.expect(jsonResponse.result.node_id).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.result.versionKey).to.be.a(\"string\");\r",
															"});\r",
															"\r",
															"pm.globals.set(\"node_id\",jsonResponse.result.node_id);\r",
															"console.log(pm.globals.get(\"node_id\"));\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {}
											},
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{auth_token}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"description": "(Required) It is the Unique Id to identify the root organisation to which the user belongs",
														"key": "X-Channel-Id",
														"value": "{{X-Channel-Id}}"
													},
													{
														"key": "",
														"value": "",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"framework\": {\n            \"name\": \"{{name}}\",\n            \"code\": \"{{code}}\",\n            \"description\":\"description\"\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/framework/v3/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"create"
													]
												},
												"description": "This API is associated with creating a new framework on the Sunbird Platform.\n   - The endpoint for **Create a Framework** is `/framework/v1/create`\n   - It points to knowledge-mw-service - `/v1/framework/create`\n   - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
											},
											"response": [
												{
													"name": "OK ! Successful operation.\"create framework\" operation was successfully executed.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) It is the Unique Id to identify the root organisation to which the user belongs",
																"key": "X-Channel-Id",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"framework\": {\n      \"name\": \"Framework Name\",\n      \"code\": \"dummy_framework\",\n      \"channels\": [\n        {\n          \"identifier\": \"in.ekstep\"\n        }\n      ]\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"create"
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.framework.create\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-14T09:49:06.794Z\",\n  \"params\": {\n    \"resmsgid\": \"9b5d7ca0-3df1-11eb-9ff3-67c41480f6aa\",\n    \"msgid\": \"9b4a90e0-3df1-11eb-9ff3-67c41480f6aa\",\n    \"status\": \"successful\",\n    \"err\": null,\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"node_id\": \"dummy_framework\",\n    \"versionKey\": \"1607939346678\"\n  }\n}"
												},
												{
													"name": "BAD REQUEST. The \"create framework\" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) It is the Unique Id to identify the root organisation to which the user belongs",
																"key": "X-Channel-Id",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"framework\": {\n      \"name\": \"Framework Name\",\n      \"code\": \"dummy_framework\",\n      \"channels\": [\n        {\n          \"identifier\": \"in.ekstep\"\n        }\n      ]\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"create"
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.framework.create\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-14T09:50:45.249Z\",\n  \"params\": {\n    \"resmsgid\": \"d60c8710-3df1-11eb-9ff3-67c41480f6aa\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": \"CONSTRAINT_VALIDATION_FAILED\",\n    \"errmsg\": \"Object already exists with identifier: dummy_framework\"\n  },\n  \"responseCode\": \"CLIENT_ERROR\",\n  \"result\": {}\n}"
												},
												{
													"name": "INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) It is the Unique Id to identify the root organisation to which the user belongs",
																"key": "X-Channel-Id",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"framework\": {\n      \"name\": \"Framework Name\",\n      \"code\": \"dummy_framework\",\n      \"channels\": [\n        {\n          \"identifier\": \"in.ekstep\"\n        }\n      ]\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"create"
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Create a framework with all valid fields",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"name1\", \"Framework112\");\r",
															"pm.environment.set(\"code1\", \"Framework112\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','status', 'err','errmsg');\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"null\");\r",
															"});\r",
															"\r",
															"pm.test(\"Status has string \", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"successful\");\r",
															"});\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.result).to.have.all.keys('node_id', 'versionKey');\r",
															"  pm.expect(jsonResponse.result.node_id).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.result.versionKey).to.be.a(\"string\");\r",
															"});\r",
															"\r",
															"pm.globals.set(\"node_fw\",jsonResponse.result.node_id);\r",
															"console.log(pm.globals.get(\"node_fw\"));\r",
															"\r",
															"// pm.test(\"Status has string \", function () {\r",
															"//     pm.expect(jsonResponse.result.node_id).to.be.equal(code);\r",
															"// });\r",
															"\r",
															"//how to check the node_id is same as the input"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{auth_token}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "X-Channel-Id",
														"value": "{{X-Channel-Id}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"request\": {\r\n        \"framework\": {\r\n            \"name\": \"{{name1}}\",\r\n            \"code\": \"{{code1}}\",\r\n            \"Description\": \"This is a Sample Framework\",\r\n            \"channels\": [\r\n                {\r\n                    \"identifier\": \"sunbird\"\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{host}}/framework/v3/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"create"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "Create a framework with invalid fields",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','status', 'err','errmsg');\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"String\");\r",
															"});\r",
															"\r",
															"pm.test(\"Status has string \", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"failed\");\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.expect(jsonResponse.params.err).to.be.equal(\"ERR_INVALID_REQUEST\");\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.expect(jsonResponse.params.errmsg).to.be.equal(\"Invalid Request. Please Provide Required Properties!\");\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.expect(jsonResponse.responseCode).to.be.equal(\"CLIENT_ERROR\");\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {}
											},
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{auth_token}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "X-Channel-Id",
														"value": "{{X-Channel-Id}}",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"request\": {\r\n        \"framework\": {\r\n            \"name\": [],\r\n            \"code\": \"Sample Framework\",\r\n            \"channels\": [\r\n                {\r\n                    \"identifier\": \"in.ekstep\"\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{host}}/framework/v3/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"create"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create a framework for invalid channel id",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.globals.set(\"name\", \"Framework19\");\r",
															"pm.globals.set(\"code\", \"Framework19\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Found\");\r",
															"});\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','status', 'err','errmsg');\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"String\");\r",
															"});\r",
															"\r",
															"pm.test(\"Status has string \", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"failed\");\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.expect(jsonResponse.params.err).to.be.equal(\"NOT_FOUND\");\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.expect(jsonResponse.params.errmsg).to.be.equal(\"Error! Node(s) doesn't Exists. | [Invalid Node Id.]: dummy\");\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.expect(jsonResponse.responseCode).to.be.equal(\"RESOURCE_NOT_FOUND\");\r",
															"});\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{auth_token}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "X-Channel-Id",
														"value": "dummy",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"request\": {\r\n        \"framework\": {\r\n            \"name\": \"{{name}}\",\r\n            \"code\": \"{{code}}\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{host}}/framework/v3/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"create"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create a framework that already exists",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','status', 'err','errmsg');\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"String\");\r",
															"});\r",
															"\r",
															"pm.test(\"Status has string \", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"failed\");\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.expect(jsonResponse.params.err).to.be.equal(\"CONSTRAINT_VALIDATION_FAILED\");\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.expect(jsonResponse.params.errmsg).to.be.equal(\"Object already exists with identifier: Sample Framework\");\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.expect(jsonResponse.responseCode).to.be.equal(\"CLIENT_ERROR\");\r",
															"});\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{auth_token}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "X-Channel-Id",
														"value": "{{X-Channel-Id}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"request\": {\r\n        \"framework\": {\r\n            \"name\": \"Sample Framework\",\r\n            \"code\": \"Sample Framework\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{host}}/framework/v3/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"create"
													]
												}
											},
											"response": []
										}
									]
								}
							],
							"description": "1. Framework name should be updated before every run\n    \n2. Framework code should be updated before every run"
						},
						{
							"name": "Read a Framework",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "Read a valid framework",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.result.framework).to.have.all.keys('identifier','lastStatusChangedOn','code','channel','languageCode','type','createdOn','objectType','versionKey','systemDefault','name','lastUpdatedOn','status','description');\r",
															"  pm.expect(jsonResponse.result.framework.identifier).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.result.framework.lastStatusChangedOn).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.result.framework.code).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.result.framework.channel).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.result.framework.languageCode).to.be.a('array');\r",
															"  pm.expect(jsonResponse.result.framework.type).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.result.framework.createdOn).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.result.framework.objectType).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.result.framework.versionKey).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.result.framework.systemDefault).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.result.framework.name).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.result.framework.lastUpdatedOn).to.be.a(\"String\");\r",
															"pm.expect(jsonResponse.result.framework.status).to.be.a(\"String\");\r",
															"});\r",
															"\r",
															"pm.test(\"Status has string Live \", function () {\r",
															"    pm.expect(jsonResponse.result.framework.status).to.be.equal(\"Live\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.globals.get(\"name_fw\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{auth_token}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "X-Channel-Id",
														"value": "{{X-Channel-Id}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{host}}/framework/v3/read/{{node_id}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"read",
														"{{node_id}}"
													]
												},
												"description": "This API is associated with fetching a specific framework\n  - The endpoint for **Get a Framework** is `/framework/v1/read/{ID}`\n  - It points to knowledge-mw-service - `/v1/framework/read/{ID}`\n  - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
											},
											"response": [
												{
													"name": "OK ! Successful operation.\"read framework\" operation was successfully executed.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/framework/v1/read/:ID",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"read",
																":ID"
															],
															"variable": [
																{
																	"key": "ID",
																	"value": "Ut enim offici",
																	"description": "(Required) The identifier of the framework to be fetched"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.framework.read\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-14T19:51:24ZZ\",\n  \"params\": {\n    \"resmsgid\": \"28f10a2a-ce6c-4dbe-a733-4c193013e84b\",\n    \"msgid\": null,\n    \"err\": null,\n    \"status\": \"successful\",\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"framework\": {\n      \"identifier\": \"dummy_framework\",\n      \"code\": \"Dumy framework updated\",\n      \"name\": \"Framework Name\",\n      \"description\": \"Dumy framework updated\",\n      \"categories\": [\n        {\n          \"identifier\": \"dummy_framework_subject\",\n          \"code\": \"subject\",\n          \"terms\": [\n            {\n              \"identifier\": \"dummy_framework_subject_english\",\n              \"code\": \"english\",\n              \"translations\": null,\n              \"name\": \"English\",\n              \"description\": \"English\",\n              \"index\": 1,\n              \"category\": \"subject\",\n              \"status\": \"Live\"\n            }\n          ],\n          \"translations\": null,\n          \"name\": \"Subject\",\n          \"description\": \"Updated description\",\n          \"index\": 1,\n          \"status\": \"Live\"\n        },\n        {\n          \"identifier\": \"dummy_framework_medium\",\n          \"code\": \"medium\",\n          \"translations\": null,\n          \"name\": \"Medium\",\n          \"description\": \"Medium\",\n          \"index\": 2,\n          \"status\": \"Live\"\n        }\n      ],\n      \"type\": \"K-12\",\n      \"objectType\": \"Framework\"\n    }\n  }\n}"
												},
												{
													"name": "BAD REQUEST. The \"read framework\" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/framework/v1/read/:ID",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"read",
																":ID"
															],
															"variable": [
																{
																	"key": "ID",
																	"value": "Ut enim offici",
																	"description": "(Required) The identifier of the framework to be fetched"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"ts\": 87966182,\n  \"id\": \"laboris q\",\n  \"params\": {\n    \"msgid\": \"do est non incididunt\",\n    \"resmsgid\": \"sint Excepteur sunt\",\n    \"status\": \"successful\",\n    \"err\": \"nisi magna eu\",\n    \"errmsg\": \"velit\"\n  },\n  \"ver\": \"cupidatat exercitation elit\",\n  \"responseCode\": \"do et cillum\",\n  \"result\": {}\n}"
												},
												{
													"name": "RESOURCE NOT FOUND. The \"read framework\" operation failed ! The possible reason for failure is that you may have passed invalid framework id.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/framework/v1/read/:ID",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"read",
																":ID"
															],
															"variable": [
																{
																	"key": "ID",
																	"value": "Ut enim offici",
																	"description": "(Required) The identifier of the framework to be fetched"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.framework.read\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-14T10:00:12.540Z\",\n  \"params\": {\n    \"resmsgid\": \"282e43c0-3df3-11eb-9ff3-67c41480f6aa\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": \"ERR_DATA_NOT_FOUND\",\n    \"errmsg\": \"Data not found with id : dummy_framework1\"\n  },\n  \"responseCode\": \"RESOURCE_NOT_FOUND\",\n  \"result\": {}\n}"
												},
												{
													"name": "INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/framework/v1/read/:ID",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"read",
																":ID"
															],
															"variable": [
																{
																	"key": "ID",
																	"value": "Ut enim offici",
																	"description": "(Required) The identifier of the framework to be fetched"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Read a retired framewrok",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.result.framework).to.have.all.keys('identifier','lastStatusChangedOn','code','channel','languageCode','type','createdOn','objectType','versionKey','systemDefault','name','lastUpdatedOn','status','description');\r",
															"  pm.expect(jsonResponse.result.framework.identifier).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.result.framework.lastStatusChangedOn).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.result.framework.code).to.be.a(\"String\");\r",
															"  //pm.expect(jsonResponse.result.framework.consumerId).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.result.framework.channel).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.result.framework.languageCode).to.be.a('array');\r",
															"  pm.expect(jsonResponse.result.framework.type).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.result.framework.createdOn).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.result.framework.objectType).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.result.framework.versionKey).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.result.framework.systemDefault).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.result.framework.name).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.result.framework.lastUpdatedOn).to.be.a(\"String\");\r",
															"pm.expect(jsonResponse.result.framework.status).to.be.a(\"String\");\r",
															"});\r",
															"\r",
															"pm.test(\"Status has string Live \", function () {\r",
															"    pm.expect(jsonResponse.result.framework.status).to.be.equal(\"Retired\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "X-Channel-Id",
														"value": "{{X-Channel-Id}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{host}}/framework/v3/read/Framework5",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"read",
														"Framework5"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "Read an invalid framework",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Found\");\r",
															"});\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','err','status','errmsg');\r",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.msgid).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"String\");\r",
															"  });\r",
															"\r",
															"pm.test(\"Err has string\", function () {\r",
															"    pm.expect(jsonResponse.params.err).to.be.equal(\"NOT_FOUND\");\r",
															"});\r",
															"pm.test(\"Status has string\", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"failed\");\r",
															"});\r",
															"pm.test(\"errmsg has string\", function () {\r",
															"    pm.expect(jsonResponse.params.errmsg).to.be.equal(\"Error! Node(s) doesn't Exists. | [Invalid Node Id.]: invalid_fw\");\r",
															"});\r",
															"pm.test(\"responseCode has string\", function () {\r",
															"    pm.expect(jsonResponse.responseCode).to.be.equal(\"RESOURCE_NOT_FOUND\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{auth_token}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "X-Channel-Id",
														"value": "{{X-Channel-Id}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{host}}/framework/v3/read/invalid_fw",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"read",
														"invalid_fw"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Update framework",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "Update an existing framework with valid fields",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','status', 'err','errmsg');\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"null\");\r",
															"});\r",
															"\r",
															"pm.test(\"Status has string \", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"successful\");\r",
															"});\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.result).to.have.all.keys('node_id', 'versionKey');\r",
															"  pm.expect(jsonResponse.result.node_id).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.result.versionKey).to.be.a(\"string\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "value",
															"value": "{{apiKey}}",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [
													{
														"description": "(Required) It is the Unique Id to identify the root organisation to which the user belongs",
														"key": "X-Channel-Id",
														"value": "{{X-Channel-Id}}",
														"disabled": true
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"request\": {\n    \"framework\": {\n      \"description\": \"Description for framework\"\n    }\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/framework/v3/update/{{node_id}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"update",
														"{{node_id}}"
													]
												},
												"description": "This API is associated with updating a framework\n  - The endpoint for **Update Framework** is `/framework/v1/update/{ID}`\n  - It points to knowledge-mw-service - `/v1/framework/update/{ID}`\n  - The fieldsmarked with an asterisk (*) are mandatory. They cannot be null or empty."
											},
											"response": [
												{
													"name": "OK ! Successful operation.\"update framework\" operation was successfully executed.",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json\n   - multipart/form-data\n   - application/x-www-form-urlencoded",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) It is the Unique Id to identify the root organisation to which the user belongs",
																"key": "X-Channel-Id",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"framework\": {\n      \"description\": \"Dumy framework updated\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/update/:ID",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"update",
																":ID"
															],
															"variable": [
																{
																	"key": "ID",
																	"value": "Ut enim offici",
																	"description": "(Required) The identifier of the framework to be updated"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.framework.update\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-14T09:57:20.317Z\",\n  \"params\": {\n    \"resmsgid\": \"c1871ed0-3df2-11eb-9ff3-67c41480f6aa\",\n    \"msgid\": \"c17ff2e0-3df2-11eb-9ff3-67c41480f6aa\",\n    \"status\": \"successful\",\n    \"err\": null,\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"node_id\": \"dummy_framework\",\n    \"versionKey\": \"1607939840281\"\n  }\n}"
												},
												{
													"name": "BAD REQUEST. The \"update framework\" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json\n   - multipart/form-data\n   - application/x-www-form-urlencoded",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) It is the Unique Id to identify the root organisation to which the user belongs",
																"key": "X-Channel-Id",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"framework\": {\n      \"description\": \"Dumy framework updated\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/update/:ID",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"update",
																":ID"
															],
															"variable": [
																{
																	"key": "ID",
																	"value": "Ut enim offici",
																	"description": "(Required) The identifier of the framework to be updated"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"ts\": 24700756,\n  \"id\": \"ut culpa\",\n  \"params\": {\n    \"msgid\": \"esse consequat\",\n    \"resmsgid\": \"commodo aliqua magna Excepteur\",\n    \"status\": \"failed\",\n    \"err\": \"dolor laborum in ullamco\",\n    \"errmsg\": \"laborum laboris sunt\"\n  },\n  \"ver\": \"laboris ut qu\",\n  \"responseCode\": \"exercitation adipisicing in aliqua\",\n  \"result\": {}\n}"
												},
												{
													"name": "RESOURCE NOT FOUND. The \"update framework\" operation failed ! The possible reason for failure is that you may have passed invalid framework id.",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json\n   - multipart/form-data\n   - application/x-www-form-urlencoded",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) It is the Unique Id to identify the root organisation to which the user belongs",
																"key": "X-Channel-Id",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"framework\": {\n      \"description\": \"Dumy framework updated\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/update/:ID",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"update",
																":ID"
															],
															"variable": [
																{
																	"key": "ID",
																	"value": "Ut enim offici",
																	"description": "(Required) The identifier of the framework to be updated"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.framework.update\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-14T09:57:50.352Z\",\n  \"params\": {\n    \"resmsgid\": \"d36e1900-3df2-11eb-9ff3-67c41480f6aa\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": \"ERR_FRAMEWORK_NOT_FOUND\",\n    \"errmsg\": \"Framework Not Found With Id : dummy_framework1\"\n  },\n  \"responseCode\": \"RESOURCE_NOT_FOUND\",\n  \"result\": {}\n}"
												},
												{
													"name": "INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json\n   - multipart/form-data\n   - application/x-www-form-urlencoded",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) It is the Unique Id to identify the root organisation to which the user belongs",
																"key": "X-Channel-Id",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"framework\": {\n      \"description\": \"Dumy framework updated\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/update/:ID",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"update",
																":ID"
															],
															"variable": [
																{
																	"key": "ID",
																	"value": "Ut enim offici",
																	"description": "(Required) The identifier of the framework to be updated"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "Update a non existing framework",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Found\");\r",
															"});\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','err','status','errmsg');\r",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.msgid).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"String\");\r",
															"  });\r",
															"\r",
															"pm.test(\"Err has string\", function () {\r",
															"    pm.expect(jsonResponse.params.err).to.be.equal(\"NOT_FOUND\");\r",
															"});\r",
															"pm.test(\"Status has string\", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"failed\");\r",
															"});\r",
															"pm.test(\"errmsg has string\", function () {\r",
															"    pm.expect(jsonResponse.params.errmsg).to.be.equal(\"Error! Node(s) doesn't Exists. | [Invalid Node Id.]: abc\");\r",
															"});\r",
															"pm.test(\"responseCode has string\", function () {\r",
															"    pm.expect(jsonResponse.responseCode).to.be.equal(\"RESOURCE_NOT_FOUND\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "in",
															"value": "header",
															"type": "string"
														},
														{
															"key": "value",
															"value": "{{auth_token}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "X-Channel-Id",
														"value": "{{X-Channel-Id}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"request\": {\r\n    \"framework\": {\r\n      \"description\": \"Description for framework\"\r\n    }\r\n  }\r\n}"
												},
												"url": {
													"raw": "{{host}}/framework/v3/update/abc",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"update",
														"abc"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Publish Framework",
							"item": [
								{
									"name": "Pre requisite",
									"item": [
										{
											"name": "Link  the framework to the category",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "X-Channel-Id",
														"value": "{{X-Channel-Id}}"
													},
													{
														"key": "Authorization",
														"value": ""
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"request\": {\n    \"category\": {\n      \"name\": \"Board\",\n      \"code\": \"board\",\n      \"description\":\"Board category\"\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{host}}/framework/v3/category/create?framework={{node_id}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"category",
														"create"
													],
													"query": [
														{
															"key": "framework",
															"value": "{{node_id}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Positive",
									"item": [
										{
											"name": "Publish a valid Framework",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','err','status','errmsg');\r",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.msgid).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"null\");\r",
															"  });\r",
															"\r",
															"pm.test(\"responseCode has string\", function () {\r",
															"    pm.expect(jsonResponse.responseCode).to.be.equal(\"OK\");\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"publishStatus has string\", function () {\r",
															"    pm.expect(jsonResponse.result.publishStatus).to.include(\"Publish Event for Framework Id \");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{auth_token}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"description": "(Required) It is the Unique Id to identify the root organisation to which the user belongs",
														"key": "X-Channel-Id",
														"value": "{{X-Channel-Id}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/framework/v3/publish/{{node_id}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"publish",
														"{{node_id}}"
													]
												},
												"description": "This API is associated with publishing a framework\n  - The endpoint for **Publish Framework** is `/framework/v1/publish/{ID}`\n  - It points to knowledge-mw-service - `/v1/framework/publish/{ID}`\n  - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
											},
											"response": [
												{
													"name": "OK ! Successful operation.\"Publish framework\" operation was successfully executed.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "The Content Type entity is the media type of the resource.\n  Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) It is the Unique Id to identify the root organisation to which the user belongs",
																"key": "X-Channel-Id",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/publish/:ID",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"publish",
																":ID"
															],
															"variable": [
																{
																	"key": "ID",
																	"value": "Ut enim offici",
																	"description": "(Required) The identifier of the framework to be published"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.framework.publish\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-14T10:07:54.648Z\",\n  \"params\": {\n    \"resmsgid\": \"3b9e5980-3df4-11eb-9ff3-67c41480f6aa\",\n    \"msgid\": \"3b9cabd0-3df4-11eb-9ff3-67c41480f6aa\",\n    \"status\": \"successful\",\n    \"err\": null,\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"publishStatus\": \"Publish Operation for Framework Id 'dummy_framework' Started Successfully!\"\n  }\n}"
												},
												{
													"name": "BAD REQUEST. The \"Publish Framework\" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "The Content Type entity is the media type of the resource.\n  Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) It is the Unique Id to identify the root organisation to which the user belongs",
																"key": "X-Channel-Id",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/publish/:ID",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"publish",
																":ID"
															],
															"variable": [
																{
																	"key": "ID",
																	"value": "Ut enim offici",
																	"description": "(Required) The identifier of the framework to be published"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.framework.publish\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-14T10:08:19.872Z\",\n  \"params\": {\n    \"resmsgid\": \"4aa73a00-3df4-11eb-9ff3-67c41480f6aa\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": \"ERR_INVALID_FRAMEOWRK_ID\",\n    \"errmsg\": \"Invalid Framework Id. Framework doesn't exist.\"\n  },\n  \"responseCode\": \"CLIENT_ERROR\",\n  \"result\": {}\n}"
												},
												{
													"name": "INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "The Content Type entity is the media type of the resource.\n  Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) It is the Unique Id to identify the root organisation to which the user belongs",
																"key": "X-Channel-Id",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/publish/:ID",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"publish",
																":ID"
															],
															"variable": [
																{
																	"key": "ID",
																	"value": "Ut enim offici",
																	"description": "(Required) The identifier of the framework to be published"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "Publish an invalid framework",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 500\", function () {\r",
															"    pm.response.to.have.status(500);\r",
															"});\r",
															"\r",
															"pm.test(\"errmsg has string\", function () {\r",
															"    pm.expect(jsonResponse.params.errmsg).to.be.equal(\"Something went wrong in server while processing the request\");\r",
															"});\r",
															"\r",
															"pm.test(\"responseCode has string\", function () {\r",
															"    pm.expect(jsonResponse.responseCode).to.be.equal(\"SERVER_ERROR\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Channel-Id",
														"value": "sunbird"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "{{auth_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}"
												},
												"url": {
													"raw": "{{host}}/framework/v3/publish/dummy",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"publish",
														"dummy"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Copy Framework",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "Copy a valid framework",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','status', 'err','errmsg');\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"null\");\r",
															"});\r",
															"\r",
															"pm.test(\"Status has string Successful\", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"successful\");\r",
															"});\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.result).to.have.all.keys('node_id');\r",
															"  pm.expect(jsonResponse.result.node_id).to.be.a(\"String\");\r",
															"});\r",
															"\r",
															"// var node = JSON.parse(jsonResponse);\r",
															"// pm.globals.set(\"node_id\", node.node_id);\r",
															"// console.log(node_id);\r",
															"\r",
															"// pm.test(\"Status has string \", function () {\r",
															"//     pm.expect(jsonResponse.result.node_id).to.be.equal(code);\r",
															"// });\r",
															"\r",
															"//how to check the node_id is same as the input"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"code\", \"Framework_copy_8\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "value",
															"value": "{{apiKey}}",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"description": "(Required) It is the Unique Id to identify the root organisation to which the user belongs",
														"key": "X-Channel-Id",
														"value": "{{X-Channel-Id}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"request\": {\n    \"framework\": {\n      \"code\": \"{{code}}\"\n    }\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/framework/v3/copy/{{node_id}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"copy",
														"{{node_id}}"
													]
												},
												"description": "This API is associated with copying a framework\n  - The endpoint for **Copy Framework** is `/framework/v1/copy/{ID}`\n  - It points to knowledge-mw-service - `v1/framework/copy/{ID}`\n  - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
											},
											"response": [
												{
													"name": "OK ! Successful operation.\"Copy framework\" operation was successfully executed.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.\n  Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) It is the Unique Id to identify the root organisation to which the user belongs",
																"key": "X-Channel-Id",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"framework\": {\n      \"code\": \"NCERTCOPY11\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/copy/:ID",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"copy",
																":ID"
															],
															"variable": [
																{
																	"key": "ID",
																	"value": "Ut enim offici",
																	"description": "(Required) The identifier of the framework to be copied"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.framework.copy\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-14T10:46:44.287Z\",\n  \"params\": {\n    \"resmsgid\": \"a8310cf0-3df9-11eb-9ff3-67c41480f6aa\",\n    \"msgid\": \"a6b2aa50-3df9-11eb-9ff3-67c41480f6aa\",\n    \"status\": \"successful\",\n    \"err\": null,\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"node_id\": \"NCERTCOPY11\"\n  }\n}"
												},
												{
													"name": "BAD REQUEST. The \"Copy fFramework\" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.\n  Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) It is the Unique Id to identify the root organisation to which the user belongs",
																"key": "X-Channel-Id",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"framework\": {\n      \"code\": \"NCERTCOPY11\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/copy/:ID",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"copy",
																":ID"
															],
															"variable": [
																{
																	"key": "ID",
																	"value": "Ut enim offici",
																	"description": "(Required) The identifier of the framework to be copied"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.framework.copy\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-14T10:47:22.578Z\",\n  \"params\": {\n    \"resmsgid\": \"bf03cb20-3df9-11eb-9ff3-67c41480f6aa\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": \"ERR_FRAMEWORK_EXISTS\",\n    \"errmsg\": \"Framework with code: NCERTCOPY11, already exists.\"\n  },\n  \"responseCode\": \"CLIENT_ERROR\",\n  \"result\": {}\n}"
												},
												{
													"name": "RESOURCE NOT FOUND. The \"Copy fFramework\" operation failed ! The possible reason for failure is that you may have missed invlalid framework id.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.\n  Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) It is the Unique Id to identify the root organisation to which the user belongs",
																"key": "X-Channel-Id",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"framework\": {\n      \"code\": \"NCERTCOPY11\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/copy/:ID",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"copy",
																":ID"
															],
															"variable": [
																{
																	"key": "ID",
																	"value": "Ut enim offici",
																	"description": "(Required) The identifier of the framework to be copied"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.framework.copy\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-14T10:47:47.865Z\",\n  \"params\": {\n    \"resmsgid\": \"ce164890-3df9-11eb-9ff3-67c41480f6aa\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": \"ERR_DATA_NOT_FOUND\",\n    \"errmsg\": \"Data not found with id : NCERT101100\"\n  },\n  \"responseCode\": \"RESOURCE_NOT_FOUND\",\n  \"result\": {}\n}"
												},
												{
													"name": "INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.\n  Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) It is the Unique Id to identify the root organisation to which the user belongs",
																"key": "X-Channel-Id",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"framework\": {\n      \"code\": \"NCERTCOPY11\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/copy/:ID",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"copy",
																":ID"
															],
															"variable": [
																{
																	"key": "ID",
																	"value": "Ut enim offici",
																	"description": "(Required) The identifier of the framework to be copied"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									],
									"description": "name of the framework should be updated before every run"
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "Copy an invalid framework",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Found\");\r",
															"});\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','err','status','errmsg');\r",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.msgid).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"String\");\r",
															"  });\r",
															"\r",
															"pm.test(\"Err has string\", function () {\r",
															"    pm.expect(jsonResponse.params.err).to.be.equal(\"NOT_FOUND\");\r",
															"});\r",
															"pm.test(\"Status has string\", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"failed\");\r",
															"});\r",
															"pm.test(\"errmsg has string\", function () {\r",
															"    pm.expect(jsonResponse.params.errmsg).to.be.equal(\"Error! Node(s) doesn't Exists. | [Invalid Node Id.]: dummy\");\r",
															"});\r",
															"pm.test(\"responseCode has string\", function () {\r",
															"    pm.expect(jsonResponse.responseCode).to.be.equal(\"RESOURCE_NOT_FOUND\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "in",
															"value": "header",
															"type": "string"
														},
														{
															"key": "value",
															"value": "{{auth_token}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "X-Channel-Id",
														"value": "{{X-Channel-Id}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"request\": {\r\n    \"framework\": {\r\n      \"code\": \"Framework_copy_5\"\r\n    }\r\n  }\r\n}"
												},
												"url": {
													"raw": "{{host}}/framework/v3/copy/dummy",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"copy",
														"dummy"
													]
												}
											},
											"response": []
										},
										{
											"name": "Copy a framework with existing name",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','err','status','errmsg');\r",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.msgid).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"String\");\r",
															"  });\r",
															"\r",
															"pm.test(\"Err has string\", function () {\r",
															"    pm.expect(jsonResponse.params.err).to.be.equal(\"CONSTRAINT_VALIDATION_FAILED\");\r",
															"});\r",
															"pm.test(\"Status has string\", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"failed\");\r",
															"});\r",
															"pm.test(\"errmsg has string\", function () {\r",
															"    pm.expect(jsonResponse.params.errmsg).to.be.equal(\"Object already exists with identifier: Framework_copy_4\");\r",
															"});\r",
															"pm.test(\"responseCode has string\", function () {\r",
															"    pm.expect(jsonResponse.responseCode).to.be.equal(\"CLIENT_ERROR\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "in",
															"value": "header",
															"type": "string"
														},
														{
															"key": "value",
															"value": "{{auth_token}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "X-Channel-Id",
														"value": "{{X-Channel-Id}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"request\": {\r\n    \"framework\": {\r\n      \"code\": \"Framework_copy_4\"\r\n    }\r\n  }\r\n}"
												},
												"url": {
													"raw": "{{host}}/framework/v3/copy/Framework5",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"copy",
														"Framework5"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Delete a Framework",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "Delete a valid framework",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','err','status','errmsg');\r",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.msgid).to.be.a('null');\r",
															"  pm.expect(jsonResponse.params.err).to.be.a('null');\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a('null');\r",
															"  });\r",
															"\r",
															"\r",
															"pm.test(\"Status has string\", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"successful\");\r",
															"});\r",
															"\r",
															"pm.test(\"responseCode has string\", function () {\r",
															"    pm.expect(jsonResponse.responseCode).to.be.equal(\"OK\");\r",
															"});\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.result).to.have.all.keys('identifier','node_id');\r",
															"  pm.expect(jsonResponse.result.identifier).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.result.node_id).to.be.a(\"string\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "in",
															"value": "header",
															"type": "string"
														},
														{
															"key": "value",
															"value": "{{auth_token}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [
													{
														"key": "X-Channel-Id",
														"value": "{{X-Channel-Id}}",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{host}}/framework/v3/retire/{{node_fw}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"retire",
														"{{node_fw}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "Delete an invalid framework",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Found\");\r",
															"});\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','err','status','errmsg');\r",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.msgid).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"String\");\r",
															"  });\r",
															"\r",
															"pm.test(\"Err has string\", function () {\r",
															"    pm.expect(jsonResponse.params.err).to.be.equal(\"NOT_FOUND\");\r",
															"});\r",
															"pm.test(\"Status has string\", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"failed\");\r",
															"});\r",
															"pm.test(\"errmsg has string\", function () {\r",
															"    pm.expect(jsonResponse.params.errmsg).to.be.equal(\"Error! Node(s) doesn't Exists. | [Invalid Node Id.]: abc\");\r",
															"});\r",
															"pm.test(\"responseCode has string\", function () {\r",
															"    pm.expect(jsonResponse.responseCode).to.be.equal(\"RESOURCE_NOT_FOUND\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "in",
															"value": "header",
															"type": "string"
														},
														{
															"key": "value",
															"value": "{{auth_token}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "X-Channel-Id",
														"value": "{{X-Channel-Id}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{host}}/framework/v3/retire/abc",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"retire",
														"abc"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					],
					"description": "1. Each time before running the folder, unique name should be given for the framework for create framework API\n    \n\n2\\. Framework can be created only for existing frameworkmaster category, if we wish to create Framework master category, it is available in the pre-requisite of publish framework\n\n3\\. Need to create framework master category if it is already existing"
				},
				{
					"name": "Framework Category",
					"item": [
						{
							"name": "Create framework category",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "Create Category",
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "X-Channel-Id",
														"value": "{{X-Channel-Id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"request\": {\n    \"category\": {\n      \"name\": \"Board\",\n      \"code\": \"board\",\n      \"description\":\"Board category\"\n    }\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/framework/v3/category/create?framework=Framework03",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"category",
														"create"
													],
													"query": [
														{
															"key": "framework",
															"value": "Framework03",
															"description": "(Required) The code of the framework under which category has to be created"
														}
													]
												},
												"description": "This API is associated with creating a category under a framework\n   - The endpoint for **Create Category** is `/framework/v1/category/create`\n   - It points to knowledge-mw-service - `/v1/framework/category/create`\n   - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
											},
											"response": [
												{
													"name": "OK ! Successful operation.\"create category\" operation was successfully executed.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"category\": {\n      \"name\": \"Subject\",\n      \"code\": \"subject\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/category/create?framework=Ut enim offici",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"category",
																"create"
															],
															"query": [
																{
																	"key": "framework",
																	"value": "Ut enim offici"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.category.create\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-14T19:32:01.754Z\",\n  \"params\": {\n    \"resmsgid\": \"0a10dba0-3e43-11eb-9ff3-67c41480f6aa\",\n    \"msgid\": \"0a05df20-3e43-11eb-9ff3-67c41480f6aa\",\n    \"status\": \"successful\",\n    \"err\": null,\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"node_id\": \"dummy_framework_medium\",\n    \"versionKey\": \"1607974321700\"\n  }\n}"
												},
												{
													"name": "BAD REQUEST. The \"create category\" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"category\": {\n      \"name\": \"Subject\",\n      \"code\": \"subject\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/category/create?framework=Ut enim offici",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"category",
																"create"
															],
															"query": [
																{
																	"key": "framework",
																	"value": "Ut enim offici"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.category.create\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-14T19:30:50.114Z\",\n  \"params\": {\n    \"resmsgid\": \"df5d7620-3e42-11eb-9ff3-67c41480f6aa\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": \"CONSTRAINT_VALIDATION_FAILED\",\n    \"errmsg\": \"Object already exists with identifier: dummy_framework_subject\"\n  },\n  \"responseCode\": \"CLIENT_ERROR\",\n  \"result\": {}\n}"
												},
												{
													"name": "INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"category\": {\n      \"name\": \"Subject\",\n      \"code\": \"subject\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/category/create?framework=Ut enim offici",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"category",
																"create"
															],
															"query": [
																{
																	"key": "framework",
																	"value": "Ut enim offici"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "Create a duplicate framework category",
											"request": {
												"method": "GET",
												"header": []
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Get a Framework Category",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "Read framework category for a valid framework",
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "value",
															"value": "{{apiKey}}",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/framework/v1/category/read/:code?framework=Ut enim offici",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"framework",
														"v1",
														"category",
														"read",
														":code"
													],
													"query": [
														{
															"key": "framework",
															"value": "Ut enim offici",
															"description": "(Required) Name of the framework under which category exists. Its an abstract data structure which serves as a template for categories and terms"
														}
													],
													"variable": [
														{
															"key": "code",
															"value": "Ut enim offici",
															"description": "(Required) The name/code of the category to be fetched"
														}
													]
												},
												"description": "This API is associated with fetching a category on Sunbird Platform\n   - The endpoint for **Fetch Category** is `/framework/v1/category/read/{code}`\n   - It points to knowledge-mw-service - `/v1/framework/category/read/{code}`\n   - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
											},
											"response": [
												{
													"name": "OK ! Successful operation.\"fetch category\" operation was successfully executed.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/framework/v1/category/read/:code?framework=Ut enim offici",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"category",
																"read",
																":code"
															],
															"query": [
																{
																	"key": "framework",
																	"value": "Ut enim offici"
																}
															],
															"variable": [
																{
																	"key": "code",
																	"value": "Ut enim offici",
																	"description": "(Required) The name/code of the category to be fetched"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.category.read\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-14T19:34:41.261Z\",\n  \"params\": {\n    \"resmsgid\": \"6923b1d0-3e43-11eb-9ff3-67c41480f6aa\",\n    \"msgid\": \"691e3390-3e43-11eb-9ff3-67c41480f6aa\",\n    \"status\": \"successful\",\n    \"err\": null,\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"category\": {\n      \"identifier\": \"dummy_framework_subject\",\n      \"lastStatusChangedOn\": \"2020-12-14T19:30:32.392+0000\",\n      \"code\": \"subject\",\n      \"frameworks\": [\n        {\n          \"identifier\": \"dummy_framework\",\n          \"name\": \"Framework Name\",\n          \"objectType\": \"Framework\",\n          \"relation\": \"hasSequenceMember\",\n          \"description\": \"Dumy framework updated\",\n          \"status\": \"Live\"\n        }\n      ],\n      \"consumerId\": \"7411b6bd-89f3-40ec-98d1-229dc64ce77d\",\n      \"channel\": \"in.ekstep\",\n      \"description\": \"Subject\",\n      \"domains\": [],\n      \"createdOn\": \"2020-12-14T19:30:32.392+0000\",\n      \"versionKey\": \"1607974232392\",\n      \"terms\": [],\n      \"appId\": \"@ignore@\",\n      \"name\": \"Subject\",\n      \"lastUpdatedOn\": \"2020-12-14T19:30:32.392+0000\",\n      \"status\": \"Live\"\n    }\n  }\n}"
												},
												{
													"name": "BAD REQUEST. The \"fetch category\" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/framework/v1/category/read/:code?framework=Ut enim offici",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"category",
																"read",
																":code"
															],
															"query": [
																{
																	"key": "framework",
																	"value": "Ut enim offici"
																}
															],
															"variable": [
																{
																	"key": "code",
																	"value": "Ut enim offici",
																	"description": "(Required) The name/code of the category to be fetched"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.category.read\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-14T19:35:21.540Z\",\n  \"params\": {\n    \"resmsgid\": \"8125c840-3e43-11eb-9ff3-67c41480f6aa\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": \"ERR_INVALID_FRAMEWORK_ID\",\n    \"errmsg\": \"Invalid FrameworkId: dummy_framework1 for Categoryinstance \"\n  },\n  \"responseCode\": \"CLIENT_ERROR\",\n  \"result\": {}\n}"
												},
												{
													"name": "INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/framework/v1/category/read/:code?framework=Ut enim offici",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"category",
																"read",
																":code"
															],
															"query": [
																{
																	"key": "framework",
																	"value": "Ut enim offici"
																}
															],
															"variable": [
																{
																	"key": "code",
																	"value": "Ut enim offici",
																	"description": "(Required) The name/code of the category to be fetched"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "Read framework category for an invalid framework",
											"request": {
												"method": "GET",
												"header": []
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Update Framework category",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "Update a valid framework category for a valid framework",
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "value",
															"value": "{{apiKey}}",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"request\": {\n    \"category\": {\n      \"description\": \"Updated description\"\n    }\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/framework/v1/category/update/:code?framework=Ut enim offici",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"framework",
														"v1",
														"category",
														"update",
														":code"
													],
													"query": [
														{
															"key": "framework",
															"value": "Ut enim offici",
															"description": "(Required) Represents the framework to which the category belongs"
														}
													],
													"variable": [
														{
															"key": "code",
															"value": "Ut enim offici",
															"description": "(Required) The name/code of the category to be updated"
														}
													]
												},
												"description": "This API is associated with updating a category in an  existing framework\n   - The endpoint for **Update Category** is `/framework/v1/category/update/{code}`\n   - It points to knowledge-mw-service - `/v1/framework/category/update/{code}`\n   - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
											},
											"response": [
												{
													"name": "OK ! Successful operation.\"update category\" operation was successfully executed.",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"category\": {\n      \"description\": \"Updated description\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/category/update/:code?framework=Ut enim offici",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"category",
																"update",
																":code"
															],
															"query": [
																{
																	"key": "framework",
																	"value": "Ut enim offici"
																}
															],
															"variable": [
																{
																	"key": "code",
																	"value": "Ut enim offici",
																	"description": "(Required) The name/code of the category to be updated"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.category.update\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-14T19:37:49.082Z\",\n  \"params\": {\n    \"resmsgid\": \"d916e7a0-3e43-11eb-9ff3-67c41480f6aa\",\n    \"msgid\": \"d90f4680-3e43-11eb-9ff3-67c41480f6aa\",\n    \"status\": \"successful\",\n    \"err\": null,\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"node_id\": \"dummy_framework_subject\",\n    \"versionKey\": \"1607974669043\"\n  }\n}"
												},
												{
													"name": "BAD REQUEST. The \"update category\" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"category\": {\n      \"description\": \"Updated description\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/category/update/:code?framework=Ut enim offici",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"category",
																"update",
																":code"
															],
															"query": [
																{
																	"key": "framework",
																	"value": "Ut enim offici"
																}
															],
															"variable": [
																{
																	"key": "code",
																	"value": "Ut enim offici",
																	"description": "(Required) The name/code of the category to be updated"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.category.update\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-14T19:38:29.662Z\",\n  \"params\": {\n    \"resmsgid\": \"f146ebe0-3e43-11eb-9ff3-67c41480f6aa\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": \"ERR_INVALID_FRAMEWORK_ID\",\n    \"errmsg\": \"Invalid FrameworkId: dummy_framework1 for Categoryinstance \"\n  },\n  \"responseCode\": \"CLIENT_ERROR\",\n  \"result\": {}\n}"
												},
												{
													"name": "INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"category\": {\n      \"description\": \"Updated description\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/category/update/:code?framework=Ut enim offici",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"category",
																"update",
																":code"
															],
															"query": [
																{
																	"key": "framework",
																	"value": "Ut enim offici"
																}
															],
															"variable": [
																{
																	"key": "code",
																	"value": "Ut enim offici",
																	"description": "(Required) The name/code of the category to be updated"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "Update an invalid framework to a valid framework",
											"request": {
												"method": "GET",
												"header": []
											},
											"response": []
										},
										{
											"name": "Update a valid framework to an invalid framework",
											"request": {
												"method": "GET",
												"header": []
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Search Framework category",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "Search framework category for a valid framework",
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "value",
															"value": "{{apiKey}}",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"request\": {\n    \"search\": {}\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/framework/v1/category/search?framework=Ut enim offici",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"framework",
														"v1",
														"category",
														"search"
													],
													"query": [
														{
															"key": "framework",
															"value": "Ut enim offici",
															"description": "(Required) Represents the framework in which category can be searched"
														}
													]
												},
												"description": "This API is associated with searching a category\n  - The endpoint for **Search Categories** is `/framework/v1/category/search`\n  - It points to knowledge-mw-service - `/v1/framework/category/search`\n  - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
											},
											"response": [
												{
													"name": "OK ! Successful operation.\"search category\" operation was successfully executed.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"search\": {}\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/category/search?framework=Ut enim offici",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"category",
																"search"
															],
															"query": [
																{
																	"key": "framework",
																	"value": "Ut enim offici"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.category.search\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-14T19:40:23.864Z\",\n  \"params\": {\n    \"resmsgid\": \"3558c380-3e44-11eb-9ff3-67c41480f6aa\",\n    \"msgid\": \"3555b640-3e44-11eb-9ff3-67c41480f6aa\",\n    \"status\": \"successful\",\n    \"err\": null,\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"count\": 2,\n    \"categories\": [\n      {\n        \"identifier\": \"dummy_framework_subject\",\n        \"lastStatusChangedOn\": \"2020-12-14T19:30:32.392+0000\",\n        \"code\": \"subject\",\n        \"frameworks\": [\n          {\n            \"identifier\": \"dummy_framework\",\n            \"name\": \"Framework Name\",\n            \"objectType\": \"Framework\",\n            \"relation\": \"hasSequenceMember\",\n            \"description\": \"Dumy framework updated\",\n            \"status\": \"Live\"\n          }\n        ],\n        \"consumerId\": \"7411b6bd-89f3-40ec-98d1-229dc64ce77d\",\n        \"channel\": \"in.ekstep\",\n        \"description\": \"Updated description\",\n        \"domains\": [],\n        \"createdOn\": \"2020-12-14T19:30:32.392+0000\",\n        \"versionKey\": \"1607974669043\",\n        \"terms\": [],\n        \"appId\": \"dev.sunbird.portal\",\n        \"name\": \"Subject\",\n        \"lastUpdatedOn\": \"2020-12-14T19:37:49.043+0000\",\n        \"status\": \"Live\"\n      },\n      {\n        \"identifier\": \"dummy_framework_medium\",\n        \"lastStatusChangedOn\": \"2020-12-14T19:32:01.700+0000\",\n        \"code\": \"medium\",\n        \"frameworks\": [\n          {\n            \"identifier\": \"dummy_framework\",\n            \"name\": \"Framework Name\",\n            \"objectType\": \"Framework\",\n            \"relation\": \"hasSequenceMember\",\n            \"description\": \"Dumy framework updated\",\n            \"status\": \"Live\"\n          }\n        ],\n        \"consumerId\": \"7411b6bd-89f3-40ec-98d1-229dc64ce77d\",\n        \"channel\": \"in.ekstep\",\n        \"description\": \"Medium\",\n        \"domains\": [],\n        \"createdOn\": \"2020-12-14T19:32:01.700+0000\",\n        \"versionKey\": \"1607974321700\",\n        \"terms\": [],\n        \"appId\": \"@ignore@\",\n        \"name\": \"Medium\",\n        \"lastUpdatedOn\": \"2020-12-14T19:32:01.700+0000\",\n        \"status\": \"Live\"\n      }\n    ]\n  }\n}"
												},
												{
													"name": "BAD REQUEST. The \"search category\" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"search\": {}\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/category/search?framework=Ut enim offici",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"category",
																"search"
															],
															"query": [
																{
																	"key": "framework",
																	"value": "Ut enim offici"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.category.search\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-14T19:41:28.846Z\",\n  \"params\": {\n    \"resmsgid\": \"5c143ae0-3e44-11eb-9ff3-67c41480f6aa\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": \"ERR_INVALID_FRAMEWORK_ID\",\n    \"errmsg\": \"Invalid FrameworkId: dummy_framework1 for Categoryinstance \"\n  },\n  \"responseCode\": \"CLIENT_ERROR\",\n  \"result\": {}\n}"
												},
												{
													"name": "INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"search\": {}\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/category/search?framework=Ut enim offici",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"category",
																"search"
															],
															"query": [
																{
																	"key": "framework",
																	"value": "Ut enim offici"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "Search framework category for an invalid framework",
											"request": {
												"method": "GET",
												"header": []
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Deleted Framework Category",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "Delete a valid framework category",
											"request": {
												"method": "GET",
												"header": []
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "Delete an invalid framework category",
											"request": {
												"method": "GET",
												"header": []
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "term",
					"item": [
						{
							"name": "Create Term",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "Create a valid term for valid framework and framework category",
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "value",
															"value": "{{apiKey}}",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"request\": {\n    \"term\": {\n      \"code\": \"english\",\n      \"name\": \"English\"\n    }\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/framework/v1/term/create?framework=Ut enim offici&category=Ut enim offici",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"framework",
														"v1",
														"term",
														"create"
													],
													"query": [
														{
															"key": "framework",
															"value": "Ut enim offici",
															"description": "(Required) Represents the framework in which the term is to be created"
														},
														{
															"key": "category",
															"value": "Ut enim offici",
															"description": "(Required) Represents the category in which the term is to be created"
														}
													]
												},
												"description": "This API is associated with creating a term under a framework category\n  - The endpoint for **Create Term** is `/framework/v1/term/create`\n  - It points to knowledge-mw-service - `/v1/framework/term/create`\n  - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.\""
											},
											"response": [
												{
													"name": "OK ! Successful operation.\"create term\" operation was successfully executed.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"term\": {\n      \"code\": \"english\",\n      \"name\": \"English\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/term/create?framework=Ut enim offici&category=Ut enim offici",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"term",
																"create"
															],
															"query": [
																{
																	"key": "framework",
																	"value": "Ut enim offici"
																},
																{
																	"key": "category",
																	"value": "Ut enim offici"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.term.create\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-14T19:44:02.348Z\",\n  \"params\": {\n    \"resmsgid\": \"b792c6c0-3e44-11eb-9ff3-67c41480f6aa\",\n    \"msgid\": \"b783f9b0-3e44-11eb-9ff3-67c41480f6aa\",\n    \"status\": \"successful\",\n    \"err\": null,\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"node_id\": [\n      \"dummy_framework_subject_english\"\n    ]\n  }\n}"
												},
												{
													"name": "BAD REQUEST. The \"create term\" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"term\": {\n      \"code\": \"english\",\n      \"name\": \"English\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/term/create?framework=Ut enim offici&category=Ut enim offici",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"term",
																"create"
															],
															"query": [
																{
																	"key": "framework",
																	"value": "Ut enim offici"
																},
																{
																	"key": "category",
																	"value": "Ut enim offici"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.term.create\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-14T19:44:49.263Z\",\n  \"params\": {\n    \"resmsgid\": \"d3896ff0-3e44-11eb-9ff3-67c41480f6aa\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": \"ERR_INVALID_CATEGORY_ID\",\n    \"errmsg\": \"Please provide valid category.\"\n  },\n  \"responseCode\": \"CLIENT_ERROR\",\n  \"result\": {}\n}"
												},
												{
													"name": "INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"term\": {\n      \"code\": \"english\",\n      \"name\": \"English\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/term/create?framework=Ut enim offici&category=Ut enim offici",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"term",
																"create"
															],
															"query": [
																{
																	"key": "framework",
																	"value": "Ut enim offici"
																},
																{
																	"key": "category",
																	"value": "Ut enim offici"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "Create a valid term for invalid framework and valid framework category",
											"request": {
												"method": "GET",
												"header": []
											},
											"response": []
										},
										{
											"name": "Create a valid term for valid framework and invalid framework category",
											"request": {
												"method": "GET",
												"header": []
											},
											"response": []
										},
										{
											"name": "Create a valid term for invalid framework and invalid framework category",
											"request": {
												"method": "GET",
												"header": []
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Read Term",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "Read term for valid framework and valid framework category",
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "value",
															"value": "{{apiKey}}",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/framework/v1/term/read/:code?framework=Ut enim offici&category=Ut enim offici",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"framework",
														"v1",
														"term",
														"read",
														":code"
													],
													"query": [
														{
															"key": "framework",
															"value": "Ut enim offici",
															"description": "(Required) Represents the framework id in which the term can be fetched"
														},
														{
															"key": "category",
															"value": "Ut enim offici",
															"description": "(Required) Represents the category in which the term can be fetched"
														}
													],
													"variable": [
														{
															"key": "code",
															"value": "Ut enim offici",
															"description": "(Required) The name/code of the term to be fetched"
														}
													]
												},
												"description": "This API is associated with fetching the available terms under a specific category and a framework on Sunbird Platform.\n   - The endpoint for **Fetch Term** is `/framework/v1/term/read/{code}`\n   - It points to knowledge-mw-service - `/v1/framework/term/read/{code}`\n   - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
											},
											"response": [
												{
													"name": "OK ! Successful operation.\"Fetch term\" operation was successfully executed.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "The Content Type entity is the media type of the resource.\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/framework/v1/term/read/:code?framework=Ut enim offici&category=Ut enim offici",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"term",
																"read",
																":code"
															],
															"query": [
																{
																	"key": "framework",
																	"value": "Ut enim offici"
																},
																{
																	"key": "category",
																	"value": "Ut enim offici"
																}
															],
															"variable": [
																{
																	"key": "code",
																	"value": "Ut enim offici",
																	"description": "(Required) The name/code of the term to be fetched"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.term.read\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-17T07:24:51.258Z\",\n  \"params\": {\n    \"resmsgid\": \"f380c1a0-4038-11eb-9b0c-abcfbdf41bc3\",\n    \"msgid\": \"f358c740-4038-11eb-9b0c-abcfbdf41bc3\",\n    \"status\": \"successful\",\n    \"err\": null,\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"term\": {\n      \"associations\": [],\n      \"identifier\": \"dummy_framework_subject_english\",\n      \"lastStatusChangedOn\": \"2020-12-14T19:44:02.260+0000\",\n      \"code\": \"english\",\n      \"consumerId\": \"7411b6bd-89f3-40ec-98d1-229dc64ce77d\",\n      \"channel\": \"in.ekstep\",\n      \"description\": \"English\",\n      \"createdOn\": \"2020-12-14T19:44:02.260+0000\",\n      \"versionKey\": \"1607975299669\",\n      \"children\": [],\n      \"appId\": \"dev.sunbird.portal\",\n      \"name\": \"English\",\n      \"lastUpdatedOn\": \"2020-12-14T19:48:19.669+0000\",\n      \"categories\": [\n        {\n          \"identifier\": \"dummy_framework_subject\",\n          \"name\": \"Subject\",\n          \"objectType\": \"CategoryInstance\",\n          \"relation\": \"hasSequenceMember\",\n          \"description\": \"Updated description\",\n          \"status\": \"Live\"\n        }\n      ],\n      \"category\": \"subject\",\n      \"status\": \"Live\"\n    }\n  }\n}"
												},
												{
													"name": "BAD REQUEST. The \"Fetch term\" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "The Content Type entity is the media type of the resource.\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/framework/v1/term/read/:code?framework=Ut enim offici&category=Ut enim offici",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"term",
																"read",
																":code"
															],
															"query": [
																{
																	"key": "framework",
																	"value": "Ut enim offici"
																},
																{
																	"key": "category",
																	"value": "Ut enim offici"
																}
															],
															"variable": [
																{
																	"key": "code",
																	"value": "Ut enim offici",
																	"description": "(Required) The name/code of the term to be fetched"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.term.read\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-17T07:54:24.246Z\",\n  \"params\": {\n    \"resmsgid\": \"14494160-403d-11eb-9b0c-abcfbdf41bc3\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": \"ERR_INVALID_CATEGORY_ID\",\n    \"errmsg\": \"Please provide valid category.\"\n  },\n  \"responseCode\": \"CLIENT_ERROR\",\n  \"result\": {}\n}"
												},
												{
													"name": "INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "The Content Type entity is the media type of the resource.\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/framework/v1/term/read/:code?framework=Ut enim offici&category=Ut enim offici",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"term",
																"read",
																":code"
															],
															"query": [
																{
																	"key": "framework",
																	"value": "Ut enim offici"
																},
																{
																	"key": "category",
																	"value": "Ut enim offici"
																}
															],
															"variable": [
																{
																	"key": "code",
																	"value": "Ut enim offici",
																	"description": "(Required) The name/code of the term to be fetched"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "Read term for invalid framework and valid framework category",
											"request": {
												"method": "GET",
												"header": []
											},
											"response": []
										},
										{
											"name": "Read term for valid framework and invalid framework category",
											"request": {
												"method": "GET",
												"header": []
											},
											"response": []
										},
										{
											"name": "Read term for invalid framework and invalid framework category",
											"request": {
												"method": "GET",
												"header": []
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Update Term",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "Update a valid term for a valid framework and framework category",
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "value",
															"value": "{{apiKey}}",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"request\": {\n    \"term\": {\n      \"name\": \"English\",\n      \"description\": \"English\"\n    }\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/framework/v1/term/update{{code}}?framework=Ut enim offici&category=Ut enim offici",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"framework",
														"v1",
														"term",
														"update{{code}}"
													],
													"query": [
														{
															"key": "framework",
															"value": "Ut enim offici",
															"description": "(Required) Represents the framework in which the terms is to be updated"
														},
														{
															"key": "category",
															"value": "Ut enim offici",
															"description": "(Required) Represents the category in which the term is to be updated"
														}
													]
												},
												"description": "This API is associated with updating a term under a category in a framework on Sunbird Platform\n   - The endpoint for **Update Term** is `/framework/v1/term/update{code}`\n   - It points to knowledge-mw-service - `/v1/framework/term/update/{code}`\n   - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
											},
											"response": [
												{
													"name": "OK ! Successful operation.\"update term\" operation was successfully executed.",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.'",
																"key": "Authorization",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"term\": {\n      \"name\": \"English\",\n      \"description\": \"English\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/term/update{{code}}?framework=Ut enim offici&category=Ut enim offici",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"term",
																"update{{code}}"
															],
															"query": [
																{
																	"key": "framework",
																	"value": "Ut enim offici"
																},
																{
																	"key": "category",
																	"value": "Ut enim offici"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.term.update\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-14T19:48:19.754Z\",\n  \"params\": {\n    \"resmsgid\": \"50ffd0a0-3e45-11eb-9ff3-67c41480f6aa\",\n    \"msgid\": \"50f04040-3e45-11eb-9ff3-67c41480f6aa\",\n    \"status\": \"successful\",\n    \"err\": null,\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"node_id\": \"dummy_framework_subject_english\",\n    \"versionKey\": \"1607975299669\"\n  }\n}"
												},
												{
													"name": "BAD REQUEST. The \"update term\" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.'",
																"key": "Authorization",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"term\": {\n      \"name\": \"English\",\n      \"description\": \"English\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/term/update{{code}}?framework=Ut enim offici&category=Ut enim offici",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"term",
																"update{{code}}"
															],
															"query": [
																{
																	"key": "framework",
																	"value": "Ut enim offici"
																},
																{
																	"key": "category",
																	"value": "Ut enim offici"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.term.update\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-14T19:49:03.927Z\",\n  \"params\": {\n    \"resmsgid\": \"6b541470-3e45-11eb-9ff3-67c41480f6aa\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": \"ERR_INVALID_CATEGORY_ID\",\n    \"errmsg\": \"Please provide valid category.\"\n  },\n  \"responseCode\": \"CLIENT_ERROR\",\n  \"result\": {}\n}"
												},
												{
													"name": "INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.'",
																"key": "Authorization",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"term\": {\n      \"name\": \"English\",\n      \"description\": \"English\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/term/update{{code}}?framework=Ut enim offici&category=Ut enim offici",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"term",
																"update{{code}}"
															],
															"query": [
																{
																	"key": "framework",
																	"value": "Ut enim offici"
																},
																{
																	"key": "category",
																	"value": "Ut enim offici"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "Update an invalid term for a valid framework and framework category",
											"request": {
												"method": "GET",
												"header": []
											},
											"response": []
										},
										{
											"name": "Update an valid term for a invalid framework and framework category",
											"request": {
												"method": "GET",
												"header": []
											},
											"response": []
										},
										{
											"name": "Update an valid term for a valid framework and invalid framework category",
											"request": {
												"method": "GET",
												"header": []
											},
											"response": []
										},
										{
											"name": "Update a valid term for invalid framework and invalid framework category",
											"request": {
												"method": "GET",
												"header": []
											},
											"response": []
										},
										{
											"name": "Update a invalid term for invalid framework and invalid framework category",
											"request": {
												"method": "GET",
												"header": []
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Search Term",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "Search term for valid framework and framework category",
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "value",
															"value": "{{apiKey}}",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"request\": {}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/framework/v1/term/search?framework=Ut enim offici&category=Ut enim offici",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"framework",
														"v1",
														"term",
														"search"
													],
													"query": [
														{
															"key": "framework",
															"value": "Ut enim offici",
															"description": "(Required) Represents the framework in which the term is to be searched"
														},
														{
															"key": "category",
															"value": "Ut enim offici",
															"description": "(Required) Represents the category in which the term is to be searched"
														}
													]
												},
												"description": "This API is associated with searching the existing terms under a category in a framework on Sunbird Platform\n   - The endpoint for **Search Term** is `/framework/v1/term/search`\n   - It points to knowledge-mw-service - `/v1/framework/term/search`\n   - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
											},
											"response": [
												{
													"name": "OK ! Successful operation.\"Search term operation was successfully executed.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {}\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/term/search?framework=Ut enim offici&category=Ut enim offici",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"term",
																"search"
															],
															"query": [
																{
																	"key": "framework",
																	"value": "Ut enim offici"
																},
																{
																	"key": "category",
																	"value": "Ut enim offici"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.term.search\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-17T08:12:44.816Z\",\n  \"params\": {\n    \"resmsgid\": \"a446e900-403f-11eb-9b0c-abcfbdf41bc3\",\n    \"msgid\": \"a4447800-403f-11eb-9b0c-abcfbdf41bc3\",\n    \"status\": \"successful\",\n    \"err\": null,\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"terms\": [\n      {\n        \"associations\": [],\n        \"identifier\": \"dummy_framework_subject_english\",\n        \"lastStatusChangedOn\": \"2020-12-14T19:44:02.260+0000\",\n        \"code\": \"english\",\n        \"consumerId\": \"7411b6bd-89f3-40ec-98d1-229dc64ce77d\",\n        \"channel\": \"in.ekstep\",\n        \"description\": \"English\",\n        \"createdOn\": \"2020-12-14T19:44:02.260+0000\",\n        \"versionKey\": \"1607975299669\",\n        \"children\": [],\n        \"appId\": \"dev.sunbird.portal\",\n        \"name\": \"English\",\n        \"lastUpdatedOn\": \"2020-12-14T19:48:19.669+0000\",\n        \"categories\": [\n          {\n            \"identifier\": \"dummy_framework_subject\",\n            \"name\": \"Subject\",\n            \"objectType\": \"CategoryInstance\",\n            \"relation\": \"hasSequenceMember\",\n            \"description\": \"Updated description\",\n            \"status\": \"Live\"\n          }\n        ],\n        \"category\": \"subject\",\n        \"status\": \"Live\"\n      }\n    ],\n    \"count\": 1\n  }\n}"
												},
												{
													"name": "BAD REQUEST. The \"search term\" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {}\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/term/search?framework=Ut enim offici&category=Ut enim offici",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"term",
																"search"
															],
															"query": [
																{
																	"key": "framework",
																	"value": "Ut enim offici"
																},
																{
																	"key": "category",
																	"value": "Ut enim offici"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.term.search\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-17T08:13:50.811Z\",\n  \"params\": {\n    \"resmsgid\": \"cb9cf2b0-403f-11eb-9b0c-abcfbdf41bc3\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": \"ERR_INVALID_CATEGORY_ID\",\n    \"errmsg\": \"Please provide valid category.\"\n  },\n  \"responseCode\": \"CLIENT_ERROR\",\n  \"result\": {}\n}"
												},
												{
													"name": "INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {}\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/term/search?framework=Ut enim offici&category=Ut enim offici",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"term",
																"search"
															],
															"query": [
																{
																	"key": "framework",
																	"value": "Ut enim offici"
																},
																{
																	"key": "category",
																	"value": "Ut enim offici"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "Search term for invalid framework and framework category",
											"request": {
												"method": "GET",
												"header": []
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "List Term",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "List term for valid framework and valid framework category",
											"request": {
												"method": "GET",
												"header": []
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "List invalid term for valid framework and valid framework category",
											"request": {
												"method": "GET",
												"header": []
											},
											"response": []
										},
										{
											"name": "List valid term for invalid framework and inavlid framework category",
											"request": {
												"method": "GET",
												"header": []
											},
											"response": []
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Master Data",
			"item": [
				{
					"name": "Master Category",
					"item": [
						{
							"name": "Create master categroy",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "Create a master category with valid mandatory fields",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','status', 'err','errmsg');\r",
															"  pm.expect(jsonResponse.params.msgid).to.be.a(\"null\"); \r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"null\");\r",
															"});\r",
															"\r",
															"pm.test(\"Status has string \", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"successful\");\r",
															"});\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.result).to.have.all.keys('identifier','node_id');\r",
															"  pm.expect(jsonResponse.result.node_id).to.be.a('String');\r",
															"  pm.expect(jsonResponse.result.identifier).to.be.a('String');\r",
															"});\r",
															"\r",
															"pm.globals.set(\"node_id1\",jsonResponse.result.node_id);\r",
															"console.log(pm.globals.get(\"node_id1\"));\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{auth_token}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-Channel-Id",
														"value": "{{X-Channel-Id}}"
													},
													{
														"key": "",
														"value": "",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"category\": {\n            \"name\": \"state\",\n            \"code\": \"state\",\n            \"targetIdFieldName\": \"targetstateIds\",\n            \"searchLabelFieldName\": \"se_state\",\n            \"searchIdFieldName\": \"se_state\",\n            \"orgIdFieldName\": \"stateIds\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/framework/v3/category/master/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"category",
														"master",
														"create"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create a master category with all valid fields",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','status', 'err','errmsg');\r",
															"  pm.expect(jsonResponse.params.msgid).to.be.a(\"null\"); \r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"null\");\r",
															"});\r",
															"\r",
															"pm.test(\"Status has string \", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"successful\");\r",
															"});\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.result).to.have.all.keys('identifier','node_id');\r",
															"  pm.expect(jsonResponse.result.node_id).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.result.identifier).to.be.a(\"string\");\r",
															"});\r",
															"\r",
															"pm.globals.set(\"node_id\",jsonResponse.result.node_id);\r",
															"console.log(pm.globals.get(\"node_id\"));\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{auth_token}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-Channel-Id",
														"value": "{{X-Channel-Id}}"
													},
													{
														"key": "",
														"value": ""
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"category\": {\n            \"name\": \"med\",\n            \"code\": \"med\",\n            \"description\": \"med category\",\n            \"targetIdFieldName\": \"targetmedIds\",\n            \"searchLabelFieldName\": \"se_med\",\n            \"searchIdFieldName\": \"se_med\",\n            \"orgIdFieldName\": \"medIds\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/framework/v3/category/master/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"category",
														"master",
														"create"
													]
												}
											},
											"response": []
										}
									],
									"description": "1. Request body should be updated with unique value each time before creating master category"
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "Create a master category with invalid fields",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"    pm.expect(jsonResponse.result).to.be.an(\"object\").that.has.all.keys(\r",
															"        'messages'\r",
															"    );\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','status', 'err','errmsg');\r",
															"pm.expect(jsonResponse.params.resmsgid).to.be.a(\"String\");\r",
															"pm.expect(jsonResponse.params.msgid).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"String\");\r",
															"});\r",
															"\r",
															"pm.test(\"err has string: CLIENT_ERROR\", function () {\r",
															"    pm.expect(jsonResponse.params.err).to.be.equal(\"CLIENT_ERROR\");\r",
															"});\r",
															"\r",
															"pm.test(\"Status has string: failed\", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"failed\");\r",
															"});\r",
															"\r",
															"pm.test(\"errmsg has string: Validation Errors\", function () {\r",
															"    pm.expect(jsonResponse.params.errmsg).to.be.equal(\"Validation Errors\");\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string: Bad Request\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"pm.test(\"ResponseCode has string: CLIENT_ERROR\", function () {\r",
															"    pm.expect(jsonResponse.responseCode).to.be.equal(\"CLIENT_ERROR\");\r",
															"});\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"    pm.expect(jsonResponse.result).to.be.an(\"object\").that.has.all.keys(\r",
															"        'messages'\r",
															"    );\r",
															"  pm.expect(jsonResponse.result.messages).to.be.an(\"array\").that.includes.members([\r",
															"      \"Required Metadata orgIdFieldName not set\",\r",
															"            \"Required Metadata code not set\"\r",
															"    ]);\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{auth_token}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-Channel-Id",
														"value": "{{X-Channel-Id}}"
													},
													{
														"key": "",
														"value": "",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"category\": {\n            \"name\": \"class\",\n            \"code\": \"\",\n            \"description\": \"\",\n            \"targetIdFieldName\": \"targetclassIds\",\n            \"searchLabelFieldName\": \"se_class\",\n            \"searchIdFieldName\": \"se_class\",\n            \"orgIdFieldName\": \"\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/framework/v3/category/master/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"category",
														"master",
														"create"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create master category with missing mandatory fields",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"    pm.expect(jsonResponse.result).to.be.an(\"object\").that.has.all.keys(\r",
															"        'messages'\r",
															"    );\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','status', 'err','errmsg');\r",
															"pm.expect(jsonResponse.params.resmsgid).to.be.a(\"String\");\r",
															"pm.expect(jsonResponse.params.msgid).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"String\");\r",
															"});\r",
															"\r",
															"pm.test(\"err has string\", function () {\r",
															"    pm.expect(jsonResponse.params.err).to.be.equal(\"CLIENT_ERROR\");\r",
															"});\r",
															"\r",
															"pm.test(\"Status has string\", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"failed\");\r",
															"});\r",
															"\r",
															"pm.test(\"errmsg has string\", function () {\r",
															"    pm.expect(jsonResponse.params.errmsg).to.be.equal(\"Validation Errors\");\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string: Bad Request\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"pm.test(\"ResponseCode has string: CLIENT_ERROR\", function () {\r",
															"    pm.expect(jsonResponse.responseCode).to.be.equal(\"CLIENT_ERROR\");\r",
															"});\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"    pm.expect(jsonResponse.result).to.be.an(\"object\").that.has.all.keys(\r",
															"        'messages'\r",
															"    );\r",
															"  pm.expect(jsonResponse.result.messages).to.be.an(\"array\").that.includes.members([\r",
															"        \"Required Metadata searchLabelFieldName not set\",\r",
															"        \"Required Metadata searchIdFieldName not set\",\r",
															"        \"Required Metadata targetIdFieldName not set\",\r",
															"        \"Required Metadata orgIdFieldName not set\"\r",
															"    ]);\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "user-id",
														"value": "rayuluv"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-Channel-Id",
														"value": "in.ekstep"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{api_key}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"category\": {\n            \"name\": \"Class\",\n            \"code\": \"Class\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/framework/v3/category/master/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"category",
														"master",
														"create"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create existing category",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"    pm.expect(jsonResponse.result).to.be.an(\"object\").that.has.all.keys(\r",
															"        'messages'\r",
															"    );\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','status', 'err','errmsg');\r",
															"pm.expect(jsonResponse.params.resmsgid).to.be.a(\"String\");\r",
															"pm.expect(jsonResponse.params.msgid).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"String\");\r",
															"});\r",
															"\r",
															"pm.test(\"err has string\", function () {\r",
															"    pm.expect(jsonResponse.params.err).to.be.equal(\"CONSTRAINT_VALIDATION_FAILED\");\r",
															"});\r",
															"\r",
															"pm.test(\"Status has string\", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"failed\");\r",
															"});\r",
															"\r",
															"pm.test(\"errmsg has string\", function () {\r",
															"    pm.expect(jsonResponse.params.errmsg).to.be.include(\"Object already exists with identifier:\");\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string: Bad Request\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"pm.test(\"ResponseCode has string: CLIENT_ERROR\", function () {\r",
															"    pm.expect(jsonResponse.responseCode).to.be.equal(\"CLIENT_ERROR\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "user-id",
														"value": "rayuluv"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-Channel-Id",
														"value": "in.ekstep"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{api_key}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"category\": {\n            \"name\": \"class\",\n            \"code\": \"class\",\n            \"description\": \"class description\",\n            \"targetIdFieldName\": \"targetclassIds\",\n            \"searchLabelFieldName\": \"se_class\",\n            \"searchIdFieldName\": \"se_class\",\n            \"orgIdFieldName\": \"se_class\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/framework/v3/category/master/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"category",
														"master",
														"create"
													]
												}
											},
											"response": []
										}
									],
									"description": "1. Third scenario, existing details should be updated in request body"
								}
							]
						},
						{
							"name": "Update Master category",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "Update details for existing master category with valid fields",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','status', 'err','errmsg');\r",
															"  pm.expect(jsonResponse.params.msgid).to.be.a(\"null\"); \r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"null\");\r",
															"});\r",
															"\r",
															"pm.test(\"Status has string \", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"successful\");\r",
															"});\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.result).to.have.all.keys('identifier','node_id');\r",
															"  pm.expect(jsonResponse.result.node_id).to.be.a('String');\r",
															"  pm.expect(jsonResponse.result.identifier).to.be.a('String');\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{auth_token}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "X-Channel-Id",
														"value": "{{X-Channel-Id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"request\": {\n      \"category\":{\n        \"Description\":\"Description of class category\"\n      }\n  }\n}"
												},
												"url": {
													"raw": "{{host}}/framework/v3/category/master/update/{{node_id1}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"category",
														"master",
														"update",
														"{{node_id1}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "Update details for invalid master category",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Found\");\r",
															"});\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','err','status','errmsg');\r",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.msgid).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"String\");\r",
															"  });\r",
															"\r",
															"pm.test(\"Err has string\", function () {\r",
															"    pm.expect(jsonResponse.params.err).to.be.equal(\"NOT_FOUND\");\r",
															"});\r",
															"pm.test(\"Status has string\", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"failed\");\r",
															"});\r",
															"pm.test(\"errmsg has string\", function () {\r",
															"    pm.expect(jsonResponse.params.errmsg).to.be.include(\"Error! Node(s) doesn't Exists. | [Invalid Node Id.]: \");\r",
															"});\r",
															"pm.test(\"responseCode has string\", function () {\r",
															"    pm.expect(jsonResponse.responseCode).to.be.equal(\"RESOURCE_NOT_FOUND\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "X-Channel-Id",
														"value": "sunbird"
													},
													{
														"key": "Authorization",
														"value": "{{auth_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"request\": {\n      \"category\":{\n        \"Description\":\"Description of class category\"\n      }\n  }\n}"
												},
												"url": {
													"raw": "{{host}}/framework/v3/category/master/update/abc",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"category",
														"master",
														"update",
														"abc"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Delete Master category",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "Delete a valid master category",
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{auth_token}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-Channel-Id",
														"value": "{{X-Channel-Id}}"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{host}}/framework/v3/category/master/retire/{{node_id}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"category",
														"master",
														"retire",
														"{{node_id}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "Delete an invalid master category",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Found\");\r",
															"});\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','err','status','errmsg');\r",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.msgid).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"String\");\r",
															"  });\r",
															"\r",
															"pm.test(\"Err has string\", function () {\r",
															"    pm.expect(jsonResponse.params.err).to.be.equal(\"NOT_FOUND\");\r",
															"});\r",
															"pm.test(\"Status has string\", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"failed\");\r",
															"});\r",
															"pm.test(\"errmsg has string\", function () {\r",
															"    pm.expect(jsonResponse.params.errmsg).to.be.include(\"Error! Node(s) doesn't Exists. | [Invalid Node Id.]: \");\r",
															"});\r",
															"pm.test(\"responseCode has string\", function () {\r",
															"    pm.expect(jsonResponse.responseCode).to.be.equal(\"RESOURCE_NOT_FOUND\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{auth_token}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-Channel-Id",
														"value": "{{X-Channel-Id}}"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "",
														"value": "",
														"disabled": true
													}
												],
												"url": {
													"raw": "{{host}}/framework/v3/category/master/retire/abc",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"category",
														"master",
														"retire",
														"abc"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Get Master Category",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "Read a live master category",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','status', 'err','errmsg');\r",
															"pm.expect(jsonResponse.params.resmsgid).to.be.a(\"String\");\r",
															"pm.expect(jsonResponse.params.msgid).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"null\");\r",
															"});\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.result).to.be.an(\"object\").that.has.all.keys(\r",
															"        'category'\r",
															"    );\r",
															"  pm.expect(jsonResponse.result.category).to.have.all.keys('trackable','identifier','lastStatusChangedOn', 'code','targetIdFieldName','channel','searchLabelFieldName','languageCode','createdOn','objectType','versionKey','name','lastUpdatedOn','searchIdFieldName','orgIdFieldName','status','description');\r",
															"});\r",
															"\r",
															"pm.test(\"Status has String: retired \", function () {\r",
															"    pm.expect(jsonResponse.result.category.status).to.be.equal(\"Live\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{auth_token}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "X-Channel-Id",
														"value": "{{X-Channel-Id}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "",
														"value": "",
														"disabled": true
													}
												],
												"url": {
													"raw": "{{host}}/framework/v3/category/master/read/{{node_id}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"category",
														"master",
														"read",
														"{{node_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Read a retired master category",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','status', 'err','errmsg');\r",
															"pm.expect(jsonResponse.params.resmsgid).to.be.a(\"String\");\r",
															"pm.expect(jsonResponse.params.msgid).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"null\");\r",
															"});\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.result).to.be.an(\"object\").that.has.all.keys(\r",
															"        'category'\r",
															"    );\r",
															"  pm.expect(jsonResponse.result.category).to.have.all.keys('trackable','identifier','lastStatusChangedOn', 'code','targetIdFieldName','channel','searchLabelFieldName','languageCode','createdOn','objectType','versionKey','name','lastUpdatedOn','searchIdFieldName','orgIdFieldName','status','description');\r",
															"});\r",
															"\r",
															"pm.test(\"Status has String: retired \", function () {\r",
															"    pm.expect(jsonResponse.result.category.status).to.be.equal(\"Retired\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{auth_token}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "X-Channel-Id",
														"value": "{{X-Channel-Id}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "{{auth_token}}"
													}
												],
												"url": {
													"raw": "{{host}}/framework/v3/category/master/read/{{node_id}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"category",
														"master",
														"read",
														"{{node_id}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "Read an invalid master category",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Found\");\r",
															"});\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','err','status','errmsg');\r",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.msgid).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"String\");\r",
															"  });\r",
															"\r",
															"pm.test(\"Err has string\", function () {\r",
															"    pm.expect(jsonResponse.params.err).to.be.equal(\"NOT_FOUND\");\r",
															"});\r",
															"pm.test(\"Status has string\", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"failed\");\r",
															"});\r",
															"pm.test(\"errmsg has string\", function () {\r",
															"    pm.expect(jsonResponse.params.errmsg).to.be.include(\"Error! Node(s) doesn't Exists. | [Invalid Node Id.]: \");\r",
															"});\r",
															"pm.test(\"responseCode has string\", function () {\r",
															"    pm.expect(jsonResponse.responseCode).to.be.equal(\"RESOURCE_NOT_FOUND\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{auth_token}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "X-Channel-Id",
														"value": "sunbird"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-Channel-Id",
														"value": "{{X-Channel-Id}}"
													}
												],
												"url": {
													"raw": "{{host}}/framework/v3/category/master/read/abc",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"category",
														"master",
														"read",
														"abc"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				}
			]
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://staging.open-sunbird.org/api",
			"type": "string"
		},
		{
			"key": "code",
			"value": "Ut enim offici",
			"type": "any"
		},
		{
			"key": "name",
			"value": ""
		},
		{
			"key": "name_fw",
			"value": ""
		},
		{
			"key": "code_fw",
			"value": ""
		},
		{
			"key": "name1",
			"value": ""
		},
		{
			"key": "code1",
			"value": ""
		}
	]
}